import { asyncHandler } from "../utils/asyncHandler.js";
import { ApiError } from "../utils/ApiError.js";
//this import user imports all the properties of (mongodb).
import { User } from "../models/user.model.js";
import { uploadOnCloudinary } from "../utils/cloundinary.js";
import { ApiResponse } from "../utils/ApiResponse.js";
import  Jwt  from "jsonwebtoken";

//from here we are not using asyncHandler because we are not handling web request.this is our internal method and we are using it internally.

const generateAccessandRefreshTokens = async (userId) => {
  try {
    //this method gets user from mongodb.
    const user = await User.findById(userId);
    //these tokens are our made that we created on usermodel file.
    console.log('Before generating tokens');
    const accessToken =  user.generateAccessToken();
    console.log('Access token generated');
    const refreshToken =  user.generateRefreshToken();
    console.log('Refresh token generated');

    user.refreshToken = refreshToken;
    console.log('Before saving user');
    await user.save({ validateBeforeSave: false });

    console.log('User saved');

    return { accessToken, refreshToken };
  } catch (error) {
    throw new ApiError(
      500,
      "Something went wrong while generating refresh and acess token"
    );
  }
};

//this userController function is made to handle asynchronous operations, such as querying a database or making API calls.
const registerUser = asyncHandler(async (req, res) => {
  //this asyncHandler is a wrapper function which we used.This function is commonly used to catch asynchronous errors and pass them to Express's error handling middleware.
  // 1. get user details from frontend
  // 2. validation - not empty
  // 3. check if user already exists: username, email
  // 4. check for images, check for avatar
  // 5. upload them to cloudinary, avatar
  // 6. create user object - create entry in db
  // 7. remove password and refresh token field from response
  // 8. check for user creation
  // 9. return res

  //we created this method to take input from frontend:-
  const { username, email, fullName, password } = req.body;
  console.log('Username:', username);
  console.log('Email:', email);
  //this process is the validation of the form handlin for all the inputs of the frontend.
  // if (fullName === ''){
  //     throw ApiError(400 , 'fullName is required')
  // } //this is for single input but we make it for all in a single if ()
  if (
    [username, email, fullName, password].some((field) => field?.trim() === "")
    //.some methods is a js method it checks if atleast one element in array specifies the condition
    //field?.trim(): it checks the if the field is undefined or null it stops either it runs trim function.trim methods remove any space
  ) {
    throw new ApiError(400, "All fields are compulsory and required");
  }
  //this method is for handling if the user is already registered or a new User:-
  const existedUser = await User.findOne({
    $or: [{ username }, { email }],
    //the $or is or operator it checks if atleast one element is true.
  });

  if (existedUser) {
    //this error is the custom made error that we made on ApiError file.
    throw new ApiError(
      409,
      `User with username '${username}' or email '${email}' already exists`
    );
  }
  //one mehtod is the checking of image
  const avatarLocalPath = req.files?.avatar[0]?.path;
  //is an object containing information about the files attached to the request
  if (!avatarLocalPath) {
    throw new ApiError(400, "Avatar file is required");
  }

  //Second method of checking the coverImage:-
  let coverImageLocalPath;
  if (
    req.files &&
    Array.isArray(req.files.coverImage) &&
    req.files.coverImage.length > 0
  ) {
    coverImageLocalPath = req.files.coverImage[0].path;
  }

  // const coverImageLocalPath = req.files?.coverImage[0]?.path;

  //uploading them to cloudinary:-
  //It uploads the avatar and cover image files to Cloudinary using the uploadOnCloudinary function. If the upload fails, it throws an error.
  const avatar = await uploadOnCloudinary(avatarLocalPath);
  const coverImage = await uploadOnCloudinary(coverImageLocalPath);
  //checking if the avatar file is uploaded or not!.
  if (!avatar) {
    throw new ApiError(400, "Failed to upload the avatar file");
  }


  //here we made the object of our User:-
  const user = await User.create({
    fullName,
    avatar: avatar.url,
    coverImage: coverImage?.url || "",
    email,
    password,
    username: username.toLowerCase(),
  });

  //we created this to get the data of the user to be created in db.in this we remove refreshToken and password of the user.
  const createdUser = await User.findById(user._id).select(
    //_id: This is typically a unique identifier automatically generated by MongoDB for each document.
    "-password -refreshToken"
    //The .select method is used to specify which fields should be included or excluded in the query results. In this case, the fields -password and -refreshToken are excluded.
  );

  //If createdUser is falsy, it implies that the user document was not found or retrieved successfully from the database.
  if (!createdUser) {
    //then it throws the error:
    throw new ApiError(400, "Something went wrong while registering the user");
  }

  //after creating a user we would have to return response.
  return res
    .status(201)
    .json(new ApiResponse(200, createdUser, "User registered Successfully"));
});
//if the functions asyncHandler worked then the ok will shown

const loginUser = asyncHandler(async (req, res) => {
  //get data of the user from the request body.
  //we want to acess by base of username and email.
  //find the user.
  //password check if logged in.
  //then we have to generate access and refresh token.
  //then send these tokens to cookies.
  //then send a response that user is logged in.

  const { username, email, password } = req.body;

  if (!username && !email) {
    throw new ApiError(400, "Username or email is not found");
  }

  //here we get the username and email and that is not updated.
  const user = await User.findOne({
    $or: [{ username }, { email }],
  });

  if (!user) {
    throw new ApiError(404, "User does not exist");
  }

  //there we cannot include 'Use' capital it gives us the value of mongoose. e.g (findOne , updatOne)
  //the small 'user gives us the value of our made user in which tokens and other methods defined.
  const isPasswordValid = await user.isPasswordCorrect(password); // this password is extracted from this login function.

  if (!isPasswordValid) {
    throw new ApiError(401, "Invalid User credentials");
  }

  //now we called the function and getted the value of access and refersh token.
  const { refreshToken, accessToken } = await generateAccessandRefreshTokens(user._id);

  //because there we want the username details from mongodb so we make this mthod
  const loggedInUser = await User.findById(user._id).select(
    "-password -refreshToken"
  );

  //then we have to send cookies we design some options of cookies:-
  const options = {
    httpOnly: true,
    secure: true,
  };

  return res
    .status(200)
    .cookie("accessToken", accessToken, options)
    .cookie("refreshToken", refreshToken, options)
    .json(
      new ApiResponse(
        200,
        {
          user: loggedInUser,
          refreshToken,
          accessToken,
        },
        "User Logged in Successfully"
      )
    );
});

const logoutUser = asyncHandler(async (req, res) => {
  await User.findByIdAndUpdate(
    req.user._id,
    {
      $unset : {
      refreshToken: 1,
      }
    },
    {
      new: true,
    }
  );
  const options = {
    httpOnly: true,
    secure: true,
  };

  return res
  .status(200)
  .clearCookie("refreshToken" , options)
  .clearCookie("accessToken" , options)
  .json(new ApiResponse(200, {}, 'User logged out'))
});

export { registerUser, loginUser, logoutUser };
//with simple export we can import this to another file but we cannot change this name on that file.
